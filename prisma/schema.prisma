// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  contacts      Contact[]
  reminders     Reminder[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id           String   @id @default(cuid())
  filename     String
  filepath     String
  size         Int
  mimeType     String
  category     Category
  description  String?
  expiryDate   DateTime?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags         Tag[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  documents Document[]
  createdAt DateTime   @default(now())
}

model Contact {
  id          String    @id @default(cuid())
  name        String
  type        ContactType
  phone       String?
  email       String?
  address     String?
  notes       String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id             String   @id @default(cuid())
  name           String
  description    String?
  lastServiceDate DateTime?
  nextServiceDate DateTime?
  contactId      String
  contact        Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Reminder {
  id          String       @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  type        ReminderType
  recurring   Boolean      @default(false)
  interval    String?
  completed   Boolean      @default(false)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum Category {
  INSURANCE
  WARRANTY
  MANUAL
  CONTRACT
  LEGAL
  FINANCIAL
  MEDICAL
  TRAVEL
  HOUSEHOLD
  AUTOMOTIVE
  PROPERTY
  OTHER
}

enum ContactType {
  SUPPLIER
  CONTRACTOR
  EMERGENCY
  UTILITY
  HEALTHCARE
  OTHER
}

enum ReminderType {
  RENEWAL
  MAINTENANCE
  APPOINTMENT
  PAYMENT
  OTHER
}